package ru.r2cloud.jradio.kunspf;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.NoSuchElementException;

import org.junit.Test;

import ru.r2cloud.jradio.TestUtil;

public class KunsPfPictureDecoderTest {

	@Test
	public void testSmallPicture() throws Exception {
		List<KunsPfBeacon> data = createImageBeacons(CHUNK_0, CHUNK_1, CHUNK_2, CHUNK_3, CHUNK_4, CHUNK_5, CHUNK_6, CHUNK_7, CHUNK_8, CHUNK_9, CHUNK_10, CHUNK_11, CHUNK_12, CHUNK_13);
		// de-duplicate
		data.add(create(13, CHUNK_13));
		// test this one should be discarded
		data.add(new KunsPfBeacon());
		KunsPfPictureDecoder decoder = new KunsPfPictureDecoder(data);
		assertTrue(decoder.hasNext());
		TestUtil.assertImage("1kunspf.png", decoder.next());
		assertFalse(decoder.hasNext());
	}

	@Test
	public void testCorruptedHeader() throws Exception {
		KunsPfPictureDecoder decoder = new KunsPfPictureDecoder(createImageBeacons(CHUNK_0, null, CHUNK_2, null, CHUNK_4, CHUNK_5, CHUNK_6, CHUNK_7, CHUNK_8, CHUNK_9, CHUNK_10, CHUNK_11, CHUNK_12, CHUNK_13));
		assertTrue(decoder.hasNext());
		TestUtil.assertImage("1kunspf.png", decoder.next());
	}

	@Test
	public void testCorruptedFirstPictureRow() throws Exception {
		KunsPfPictureDecoder decoder = new KunsPfPictureDecoder(createImageBeacons(CHUNK_0, CHUNK_1, CHUNK_2, CHUNK_3, null, CHUNK_5, CHUNK_6, CHUNK_7, CHUNK_8, CHUNK_9, CHUNK_10, CHUNK_11, CHUNK_12, CHUNK_13));
		assertTrue(decoder.hasNext());
		// under the hood it will use ImageIO.read function that will call some
		// JDK-specific and potentially platform-specific code
		// it turned out that broken JPEG interpreted differently between JDK8 and JDK11
		// causing this test to fail.
		// Solution: skip corrupted row and make sure the rest of image is good
		TestUtil.assertImage("1kunspf-corrupted.png", decoder.next(), 0, 8);
	}

	@Test(expected = NoSuchElementException.class)
	public void testEmpty() {
		KunsPfPictureDecoder decoder = new KunsPfPictureDecoder(Collections.emptyList());
		assertFalse(decoder.hasNext());
		decoder.next();
	}

	@Test
	public void testTwoImages() throws Exception {
		List<KunsPfBeacon> data = new ArrayList<>(createImageBeacons(CHUNK_0, CHUNK_1, null, null, CHUNK_4));
		data.addAll(createImageBeacons(CHUNK_0, CHUNK_1, CHUNK_2, CHUNK_3, CHUNK_4, CHUNK_5, CHUNK_6, CHUNK_7, CHUNK_8, CHUNK_9, CHUNK_10, CHUNK_11, CHUNK_12, CHUNK_13));
		KunsPfPictureDecoder decoder = new KunsPfPictureDecoder(data);
		// first image is not interesting, just make sure it is detected
		assertTrue(decoder.hasNext());
		assertTrue(decoder.hasNext());
		TestUtil.assertImage("1kunspf.png", decoder.next());
	}

	private static final List<KunsPfBeacon> createImageBeacons(byte[]... chunks) {
		List<KunsPfBeacon> result = new ArrayList<>(chunks.length);
		for (int i = 0; i < chunks.length; i++) {
			byte[] cur = chunks[i];
			// null is used to set a gaps in the imageChunk sequence
			if (cur == null) {
				continue;
			}
			result.add(create(i, cur));
		}
		return result;
	}

	private static final KunsPfBeacon create(int index, byte[] data) {
		KunsPfImageChunk chunk = new KunsPfImageChunk();
		chunk.setImageBlock(index);
		chunk.setImageChunk(data);

		KunsPfBeacon beacon = new KunsPfBeacon();
		beacon.setImageChunk(chunk);
		return beacon;
	}

	private static final byte[] CHUNK_0 = new byte[] { -1, -40, -1, -32, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -37, 0, 67, 0, 12, 8, 9, 11, 9, 8, 12, 11, 10, 11, 14, 13, 12, 14, 18, 30, 20, 18, 17, 17, 18, 37, 26, 28, 22, 30, 44, 38, 46, 45, 43, 38, 42, 41, 48, 54, 69, 59, 48, 51,
			65, 52, 41, 42, 60, 82, 61, 65, 71, 74, 77, 78, 77, 47, 58, 85, 91, 84, 75, 90, 69, 76, 77, 74, -1, -37, 0, 67, 1, 13, 14, 14, 18, 16, 18, 35, 20, 20, 35, 74, 50, 42, 50, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74 };
	private static final byte[] CHUNK_1 = new byte[] { 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, -1, -60, 0, 31, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, -60, 0, -75, 16,
			0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, -127, -111, -95, 8, 35, 66, -79, -63, 21, 82, -47, -16, 36, 51, 98, 114, -126, 9, 10, 22, 23, 24, 25, 26 };
	private static final byte[] CHUNK_2 = new byte[] { 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, -125, -124, -123, -122, -121, -120, -119, -118,
			-110, -109, -108, -107, -106, -105, -104, -103, -102, -94, -93, -92, -91, -90, -89, -88, -87, -86, -78, -77, -76, -75, -74, -73, -72, -71, -70, -62, -61, -60, -59, -58, -57, -56, -55, -54, -46, -45, -44, -43, -42, -41, -40, -39, -38, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -15,
			-14, -13, -12, -11, -10, -9, -8, -7, -6, -1, -60, 0, 31, 1, 0, 3, 1, 1, 1 };
	private static final byte[] CHUNK_3 = new byte[] { 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, -60, 0, -75, 17, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, -127, 8, 20, 66, -111, -95, -79,
			-63, 9, 35, 51, 82, -16, 21, 98, 114, -47, 10, 22, 36, 52, -31, 37, -15, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116 };
	private static final byte[] CHUNK_4 = new byte[] { 117, 118, 119, 120, 121, 122, -126, -125, -124, -123, -122, -121, -120, -119, -118, -110, -109, -108, -107, -106, -105, -104, -103, -102, -94, -93, -92, -91, -90, -89, -88, -87, -86, -78, -77, -76, -75, -74, -73, -72, -71, -70, -62, -61, -60,
			-59, -58, -57, -56, -55, -54, -46, -45, -44, -43, -42, -41, -40, -39, -38, -30, -29, -28, -27, -26, -25, -24, -23, -22, -14, -13, -12, -11, -10, -9, -8, -7, -6, -1, -64, 0, 17, 8, 0, 120, 0, -96, 3, 1, 33, 0, 2, 17, 1, 3, 17, 1, -1, -38, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, -24, 20,
			26, 125, -80, -54, 50, -5, -42, 4, 13, -108, -30, 76, 122, -46, 73 };
	private static final byte[] CHUNK_5 = new byte[] { -55, -2, -76, 12, 45, 63, -44, -44, -106, -7, 47, 86, 35, 19, -30, 76, 123, -76, 45, -34, -115, 94, 71, 87, -48, -92, 37, 37, 49, -117, 73, 72, 2, -118, 0, 40, -96, 2, -118, 0, 40, -96, 15, 122, 65, -98, -108, -56, 14, -39, 88, 122, -118, -25,
			36, 73, -128, -54, 73, -17, 83, 48, -36, -125, 101, 49, -116, -118, 45, -106, -20, 42, 123, 72, -2, 92, -6, -43, -36, 70, 95, -113, 98, -33, -31, -87, -3, -115, 120, -87, -83, 22, -61, 66, 81, 76, 97, 73, 72, 2, -118, 0, 40, -96, 2, -118, 0, 40, -96, 15, 124, -73, -30, -98, -47, -19,
			109, -33, -99, 115, 8, 105, 11, -72, 46, 62, -11, 62 };
	private static final byte[] CHUNK_6 = new byte[] { -38, 51, -73, 105, -96, 11, 62, 86, 33, 97, -34, -117, 111, -8, -9, 67, 76, 10, 30, 49, -113, 127, -122, 111, 62, -107, -31, 13, -42, -73, -113, -62, 3, 104, -86, 24, 81, 72, 2, -110, -128, 10, 40, 0, -94, -128, 10, 40, 3, -33, 81, 106, 105, 14,
			49, -23, -34, -71, 64, 111, 30, 114, -6, -11, -87, -93, 25, -69, -10, -59, 32, 45, 56, -7, -128, -11, -88, 45, 127, -29, -33, -37, 52, -29, -80, 50, 47, 18, 71, -65, -61, -105, -61, -3, -118, -7, -6, 79, -68, 107, -94, 63, 8, -122, 81, 86, 48, -94, -112, 9, 69, 0, 20, 80, 1, 69, 0, 20,
			80, 7, -48, 54, -21, -75, 125, -22, 82, -69 };
	private static final byte[] CHUNK_7 = new byte[] { -44, -41, 32, 15, 17, -3, -36, -11, -89, 14, 29, 115, 72, 8, -25, 119, 55, -40, 31, -61, -46, -97, 100, 114, -45, 69, -2, -42, 69, 104, -74, 17, 38, -78, -69, -76, 27, -17, -6, -25, 95, 59, -51, -2, -79, -85, 104, 108, 4, 116, -107, 99, 10, 41,
			0, 81, 64, 9, 69, 0, 20, 80, 1, 69, 0, 125, 3, -100, 57, 74, -80, 57, 33, 71, 74, -29, 2, 87, -7, 98, -56, -21, 78, 35, -48, 114, 69, 72, -56, 17, -66, 112, 92, 116, 112, 51, 72, 65, -122, -7, -51, 109, 98, 75, -102, -96, -50, -117, 119, -17, 21, 124, -27, 113, -2, -71, -66, -75, -83,
			63, -124, 8, -87, 43, 65, -123, 20, -128 };
	private static final byte[] CHUNK_8 = new byte[] { 40, -96, 4, -94, -128, 10, 40, 0, -94, -128, 61, -10, -11, 89, 112, -21, -42, -92, -77, -72, -13, 39, 92, -12, -82, 95, -78, 5, -87, 103, 82, -37, 71, -9, -79, 75, 111, 63, 24, 110, 27, 56, 21, 22, -48, 11, 109, 10, -96, -25, -5, -44, -53, -12,
			-3, -22, -56, 59, -118, 113, 122, -125, 36, -44, 71, -4, 73, -82, 63, -21, -111, -81, -101, -18, -65, -41, -65, -42, -70, 41, -20, 4, 52, -107, -88, 5, 20, -128, 40, -96, 4, -94, -128, 10, 40, 0, -94, -128, 62, -124, -71, -27, 50, 105, -106, 59, 62, -44, 64, 28, -9, -82, 78, -128, 87,
			-107, -56, -65, 36, 47, -54, 36, -21, 87, -82, -93, -39, -87 };
	private static final byte[] CHUNK_9 = new byte[] { 41, -11, -86, 125, 0, -44, -112, -2, -24, -79, -20, 115, 72, 79, -99, 26, 46, 58, -42, 72, 98, 106, -115, -1, 0, 18, -69, -81, -6, -26, 107, -26, -21, -81, -11, -17, -11, -82, -86, 95, 8, -120, 104, -83, 0, 40, -96, 4, -94, -128, 18, -118, 0,
			40, -96, 2, -118, 0, -6, 17, 50, -42, -61, 112, -4, -23, -74, 113, 121, 83, -49, -98, -72, -82, 64, 44, -91, -72, -122, -47, -102, 47, -34, -90, 114, 42, -15, -117, -51, 72, -77, -21, -102, -122, -6, -116, -111, 118, -73, 6, -99, 111, -121, 110, 58, 41, -88, -24, 49, -102, -41, 26, 77,
			-33, -3, 115, 53, -13, 93, -49, -6, -25, -6, -41, 93, 31, -124, -98 };
	private static final byte[] CHUNK_10 = new byte[] { -92, 52, 86, -32, 20, -108, -128, 40, -96, 4, -94, -128, 10, 40, 0, -94, -128, 61, -2, -46, -29, 33, 35, 127, -67, -42, -84, 29, -62, -14, 61, -117, -99, -54, 115, 92, 111, 112, 52, 52, -88, -68, -69, 29, -113, -23, 78, -75, 115, 32, 92, -10,
			-19, 89, -66, -91, 9, -113, -106, 70, 29, -50, 42, 91, 47, -30, -57, 99, 79, -96, -120, -4, 64, 118, -24, -73, -121, -2, -103, 26, -7, -74, 127, -11, -83, -11, -82, -86, 63, 8, -120, -88, -83, 64, 41, 40, 0, -94, -128, 18, -118, 0, 40, -96, 2, -118, 0, -10, -37, 121, -102, 91, -28, 97,
			-49, 108, 87, 70, -117, -125, -65, -45, -91, 114, -43, 86, 4, 93 };
	private static final byte[] CHUNK_11 = new byte[] { -74, 15, -79, -73, 119, -23, -118, -89, 16, 41, 59, -11, 21, -118, 40, -77, -27, -123, -117, 98, -14, -52, -39, -85, 48, 46, -35, -34, -26, -122, -12, 2, -121, -118, 91, 103, -121, -17, 79, -3, 51, 53, -13, -116, -65, 124, -41, 101, 47, -124,
			-110, 58, 74, -48, 2, -118, 0, 40, -96, 4, -94, -128, 10, 40, 0, -94, -128, 61, -57, 71, -117, 116, -110, 30, -7, -59, 116, 127, -14, -53, -46, -71, 106, -4, 65, 18, -11, -79, -7, 121, -21, 77, -72, 43, 28, 79, 38, 57, -82, 101, -71, -96, -44, -7, 84, 49, -18, 127, 42, -76, 41, -79, 24,
			126, 55, 125, -98, 25, -67, 63, -20, 87, -50, -17, -9, -115, 119, 83 };
	private static final byte[] CHUNK_12 = new byte[] { -8, 72, 27, 73, 90, 0, 81, 64, 5, 20, 0, -108, 80, 1, 69, 0, 20, 80, 7, -68, -24, 1, -124, 38, 78, -71, 106, -24, -112, 101, 9, -24, 107, -114, -73, -60, 17, 38, -76, 24, 86, -7, -78, 115, 68, -100, 28, 99, 57, 53, -121, 82, -63, -109, 119, 3,
			-79, -85, 20, 1, -52, 124, 70, -109, -53, -16, -83, -49, -65, 21, -32, 45, 93, -12, -66, 18, 6, -46, 86, -128, 20, 80, 1, 69, 0, 37, 20, 0, 81, 64, 5, 20, 1, -17, -70, 68, 63, -71, 30, 97, -58, -6, -34, -119, 2, 66, 23, -75, 113, 85, 122, -126, 44, -62, 49, -69, -36, -43, 43, -74, 127,
			-75, 42, -114, 48, 115, 89, 71 };
	private static final byte[] CHUNK_13 = new byte[] { 114, -53, 108, -31, 65, 38, -89, -87, 3, -117, -8, -83, 46, -49, 13, 109, -2, -13, -41, -122, -102, -12, 41, 124, 4, 9, 73, 90, -128, 81, 72, 2, -110, -128, 10, 40, 0, -94, -128, 10, 40, 3, -24, 91, 53, -64, 25, 57, -83, 120, 126, 97, 92, 19,
			26, 45, 127, 21, 35, -62, -82, -64, -98, -43, -119, 101, 91, -93, -74, 74, -79, 3, -18, -83, 58, 8, -32, 126, 49, 77, -73, 76, -73, -113, -43, -85, -57, 43, -74, -97, -62, 64, -108, 86, -128, 20, 80, 2, 81, 64, 5, 20, 0, 81, 64, 5, 20, 1, -1, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 65, 66,
			0, 14, 0, 0, 4, 88 };

}
